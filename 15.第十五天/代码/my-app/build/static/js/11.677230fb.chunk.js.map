{"version":3,"sources":["pages/map/map.jsx"],"names":["BMap","window","Map","props","fnAddOverlayer","point","value","level","a","async","map","centerAndZoom","loading","axios","get","oRes","hide","aCityList","data","body","item","oPos","Point","coord","longitude","latitude","opts","position","offset","Size","label","Label","count","setStyle","border","background","addEventListener","fnRefreshMap","addOverlay","e","iMovex","iMovey","innerWidth","changedTouches","clientX","innerHeight","clientY","err","fnShowHouseList","obj","panBy","setState","sClass","aHouseList","list","setTimeout","clearOverlays","state","oCurrentCity","store","getState","this","sCurrentCityName","Geocoder","getPoint","addControl","NavigationControl","ScaleControl","className","onClick","history","goBack","id","style","href","key","houseCode","src","BASE_URL","houseImg","title","desc","tags","val","i","price","Component"],"mappings":"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","file":"static/js/11.677230fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './map.css';\r\nimport store from '../store'\r\n\r\n// 导入Toast提示框\r\nimport { Toast } from 'antd-mobile';\r\n\r\nimport {BASE_URL } from '../../utils'\r\n\r\nlet BMap = window.BMap;\r\n\r\nclass Map extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            oCurrentCity:store.getState(),\r\n            sClass:'houseList',\r\n            aHouseList:[]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){        \r\n        this.map = new BMap.Map(\"baidu_map\");\r\n\r\n        // 给地图绑定movestart事件，地图移动时触发此事件\r\n        this.map.addEventListener('movestart',()=>{\r\n            this.setState({\r\n                sClass:'houseList'\r\n            })\r\n        })\r\n\r\n\r\n        let sCurrentCityName = this.state.oCurrentCity.label;\r\n\r\n        // 在组件上存储一个地图缩放级别的变量\r\n        this.level = 11;\r\n        // 通过当前城市名称，获取城市名称的坐标点，再用这个坐标点显示地图\r\n        let myGeo = new BMap.Geocoder();      \r\n        // 将地址解析结果显示在地图上，并调整地图视野    \r\n        myGeo.getPoint(sCurrentCityName, point=>{      \r\n            if (point) {                \r\n                //在地图上加上比例尺\r\n                this.map.addControl(new BMap.NavigationControl()); \r\n                // 在地图上加上缩放按钮   \r\n                this.map.addControl(new BMap.ScaleControl());\r\n                // 调用在地图上放覆盖物的方法\r\n                this.fnAddOverlayer( point,this.state.oCurrentCity.value,this.level );\r\n            }      \r\n        }, \r\n        sCurrentCityName);\r\n    }\r\n    // 定义在地图上放覆盖物(数据)的方法\r\n    fnAddOverlayer=async (point,value,level)=>{\r\n        // 如果传递的level参数，那么这个方法是第一调用的\r\n        // 这个时候this.level的值就是11，\r\n        // 如果没有传递这个参数，那么这个方法就是第二次或者第三次调用的\r\n        // 如果是第二次调用，在调用之前，this.level的值是11，把它设置成13，来调用这个方法\r\n        // 如果是第三次调用，在调用之前，this.level的值是13，把它设置成15，来调用这个方法\r\n        if(level){\r\n            this.level = 11;\r\n        }else{\r\n            if(this.level===11){\r\n                this.level = 13\r\n            }else if( this.level===13 ){\r\n                this.level=15\r\n            }\r\n        }\r\n        this.map.centerAndZoom(point,this.level);\r\n\r\n        // 开启loading\r\n        Toast.loading('加载中...',0);\r\n        let oRes = await this.axios.get('/area/map?id='+ value);\r\n\r\n        // 关闭loading\r\n        Toast.hide();\r\n        //console.log(oRes.data.body);\r\n        let aCityList = oRes.data.body;\r\n\r\n        if( this.level!==15 ){\r\n            aCityList.map(item=>{\r\n                let oPos = new BMap.Point(item.coord.longitude,item.coord.latitude);\r\n                let opts = {\r\n                    position : oPos,    // 指定文本标注所在的地理位置\r\n                    offset   : new BMap.Size(-37, -37)    //设置文本偏移量\r\n                }\r\n    \r\n                let label = new BMap.Label(`<div class='map_label01'>${item.label}<br />${item.count}套</div>`, opts);  // 创建文本标注对象\r\n                \r\n                label.setStyle({\r\n                    border : \"0px\",\r\n                    background : \"transparent\"         \r\n                });\r\n    \r\n                // 给label标签绑定点击事件\r\n                label.addEventListener('click',()=>{\r\n                    this.fnRefreshMap( oPos,item.value )\r\n                })   \r\n                this.map.addOverlay(label); \r\n            }) \r\n        }else{\r\n            aCityList.map(item=>{\r\n                let oPos = new BMap.Point(item.coord.longitude,item.coord.latitude);\r\n                let opts = {\r\n                    position : oPos,    // 指定文本标注所在的地理位置\r\n                    offset   : new BMap.Size(-60, -56)    //设置文本偏移量\r\n                }\r\n    \r\n                let label = new BMap.Label(`<div class='map_label02'>${item.label}&nbsp;&nbsp;&nbsp;${item.count}套</div>`, opts);  // 创建文本标注对象\r\n                \r\n                label.setStyle({\r\n                    border : \"0px\",\r\n                    background : \"transparent\"         \r\n                });\r\n    \r\n                // 给label标签绑定点击事件\r\n                label.addEventListener('click',(e)=>{\r\n                    //console.log(e.changedTouches[0]);\r\n                    let iMovex = 0;\r\n                    let iMovey = 0;\r\n\r\n                    // 计算地图移动的位置\r\n                    // 增加程序健壮性优化( changedTouches对象可能在某种情况下拿不到 )\r\n                    try{\r\n                        iMovex = window.innerWidth/2 - e.changedTouches[0].clientX;\r\n                        iMovey = window.innerHeight/4 - e.changedTouches[0].clientY;\r\n                    }catch(err){\r\n                        iMovex = window.innerWidth/2 - e.clientX;\r\n                        iMovey = window.innerHeight/4 - e.clientY;\r\n                    }                    \r\n\r\n                    this.fnShowHouseList(item.value,{iMovex,iMovey});\r\n                })   \r\n                this.map.addOverlay(label); \r\n            })\r\n        }            \r\n\r\n    }\r\n\r\n    fnShowHouseList=async (value,obj)=>{\r\n\r\n        // 让地图移动\r\n        this.map.panBy( obj.iMovex,obj.iMovey );\r\n\r\n        //console.log(value);\r\n         // 开启loading\r\n        Toast.loading('加载中...',0);\r\n        let oRes = await this.axios.get('/houses?cityId='+ value);\r\n        //console.log(oRes.data.body.list);\r\n \r\n         // 关闭loading\r\n        Toast.hide();\r\n\r\n        this.setState({\r\n            sClass:'houseList houseListShow',\r\n            aHouseList:oRes.data.body.list\r\n        })\r\n    }\r\n\r\n\r\n    fnRefreshMap=(point,value)=>{\r\n        // 清除地图上原有的覆盖物\r\n        // 加定时器包裹清除覆盖物的方法，是为了解决它里面报错的问题\r\n        setTimeout(()=>{\r\n            this.map.clearOverlays();\r\n        },0);       \r\n\r\n        // 在地图上添加新的覆盖物\r\n        this.fnAddOverlayer( point,value )\r\n    }\r\n\r\n\r\n    render() {\r\n        let { sClass, aHouseList} = this.state;\r\n\r\n        return (\r\n            // 最外层的容器标签可以用空标签\r\n            <>\r\n                <div className=\"common_title\">\r\n                    <span className=\"back iconfont icon-prev\" onClick={ ()=>this.props.history.goBack() }></span>\r\n                    <h3>地图找房</h3>\r\n                </div>\r\n                <div className=\"map_com\" >\r\n                    <div id=\"baidu_map\" style={ {'width':'100%','height':'100%'} }></div>\r\n                </div>\r\n\r\n                <div className={ sClass }>\r\n                    <div className=\"titleWrap\">\r\n                        <h1 className=\"listTitle\">房屋列表</h1>\r\n                        <a className=\"titleMore\" href=\"/house/list\">\r\n                            更多房源\r\n                        </a>\r\n                    </div>\r\n\r\n                    <div className=\"houseItems\">\r\n                        {\r\n                            aHouseList.map(item=>(\r\n                                <div className=\"house\" key={ item.houseCode }>\r\n                                    <div className=\"imgWrap\">\r\n                                        <img className=\"img\" src={ BASE_URL+item.houseImg} />\r\n                                    </div>\r\n                                    <div className=\"content\">\r\n                                        <h3 className=\"title\">{item.title}</h3>\r\n                                        <div className=\"desc\">{item.desc}</div>\r\n                                        <div>\r\n                                            {\r\n                                                item.tags.map((val,i)=>(\r\n                                                    <span className={\"tag tag\"+i} key={i}>{ val }</span>\r\n                                                ))\r\n                                            }                                            \r\n                                        </div>\r\n                                        <div className=\"price\">\r\n                                            <span className=\"priceNum\">{item.price}</span> 元/月\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;"],"sourceRoot":""}