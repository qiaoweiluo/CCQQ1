{"version":3,"sources":["assets/js/set_root.js","pages/home/home.jsx","pages/layout/layout.jsx","app.js","index.js","pages/store/reducer.js","pages/store/index.js","utils/index.js","pages/city/city.jsx"],"names":["calc","docElement","document","documentElement","clientWidthValue","clientWidth","style","fontSize","window","addEventListener","Searchbar","props","fnStoreChange","setState","sCurrentCityName","store","getState","label","fnShowCity","sClass","state","unsubscribe","subscribe","this","sCurrentCity","sessionStorage","getItem","oCurrentCity","JSON","parse","dispatch","type","value","BMap","LocalCity","get","result","a","async","cityName","name","axios","oRes","data","body","setItem","stringify","className","onClick","history","push","Component","Slide","fnGetData","length","autoplay","infinite","map","val","key","id","href","display","width","height","src","BASE_URL","imgSrc","alt","verticalAlign","Menu","to","Group","aList","item","title","desc","WithSearchbar","withRouter","Home","Houselist","lazy","Info","User","CustomLink","exact","path","children","match","Layout","component","Map","Detail","Login","Rent","Zlist","WithRent","WithLogin","App","fallback","render","localStorage","from","defaults","baseURL","aUrlList","interceptors","request","use","config","sUrl","url","token","includes","headers","authorization","error","Promise","reject","prototype","ReactDOM","getElementById","reducer","action","createStore","fnFormatData","oCityList","sLetter","short","substr","aCityKey","Object","keys","sort","City","oNowCityList","sCityList","sHotCityList","oNowHotCityList","oRes2","unshift","rowRenderer","str","index","aCityList","toUpperCase","fnChangeCity","sName","info","sNowCurrentCity","oNowCurrentCity","rowHeightCount","fnScrollToRow","i","bIsScrolling","oRef","current","scrollToRow","iCurrent","setTimeout","onRowsRendered","startIndex","onScroll","scrollHeight","scrollTop","clientHeight","React","createRef","ref","rowCount","rowHeight","scrollToAlignment"],"mappings":"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","file":"static/js/main.c847faa1.chunk.js","sourcesContent":[";(function(){\r\n\tvar calc = function(){\r\n\t\tvar docElement = document.documentElement;\r\n\t\tvar clientWidthValue = docElement.clientWidth\r\n\t\tdocElement.style.fontSize = 20*(clientWidthValue/375) + 'px';\r\n\t}\r\n\tcalc();\r\n\twindow.addEventListener('resize',calc);\r\n})();","import React, { Component } from 'react';\r\nimport './home.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Carousel } from 'antd-mobile';\r\nimport { BASE_URL } from '../../utils';\r\n\r\nimport store from '../store';\r\nimport City from '../city/city';\r\n\r\n// 从react-router-dom中导入高级组件withRouter来让没有参与路由的组件获得路由信息\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\n// 定义searchbar组件\r\nclass Searchbar extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            sCurrentCityName:store.getState().label,\r\n            sClass:'city_wrap'\r\n        }\r\n        this.unsubscribe = store.subscribe( this.fnStoreChange )\r\n    }\r\n\r\n    fnStoreChange=()=>{\r\n        this.setState({\r\n            sCurrentCityName:store.getState().label\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.unsubscribe();\r\n    }\r\n\r\n    componentDidMount(){ \r\n        // 验证sessionStorage里面是否存储了当前城市\r\n        // 如果有当前城市，就直接用sessionStorage里面的当前城市，不用去定位和请求\r\n        // 如果没有，就去定位和请求\r\n        let sCurrentCity= sessionStorage.getItem('haoke_current_city');\r\n\r\n        if( sCurrentCity ){\r\n            // 如果是有存储当前城市\r\n            let oCurrentCity = JSON.parse( sCurrentCity );\r\n           /*  \r\n           this.setState({\r\n                sCurrentCityName:oCurrentCity.label\r\n            })             \r\n            */\r\n\r\n            // 将当前城市存储到数据中心\r\n            store.dispatch({\r\n                type:'change_city',\r\n                value:oCurrentCity\r\n            })\r\n\r\n        }else{\r\n            // 如果没有存储当前城市\r\n\r\n            // 页面上引入了百度地图的js，它里面的变量和函数，在其他组件中是拿不到的，这个是react的问题\r\n            // 这些变量或者函数是全局的变量和函数，它默认会放到window对象上\r\n            // 我们可以通过window对象去拿这些变量和函数\r\n            let BMap = window.BMap;\r\n            var myCity = new BMap.LocalCity();\r\n            \r\n            /* \r\n            function myFun(result){\r\n                var cityName = result.name;\r\n                console.log(\"当前定位城市:\"+cityName);\r\n            }      \r\n            myCity.get(myFun); \r\n            */            \r\n            myCity.get(async result=>{\r\n                let cityName = result.name;\r\n                //console.log(\"当前定位城市:\"+cityName);\r\n\r\n                // 将当前城市名称去请求一个接口，验证当前城市是否在公司业务范围内\r\n                // 如果在公司业务范围内，就返回这个城市的信息，如果不在公司业务范围内，就返回上海的城市信息\r\n                let oRes =await this.axios.get('/area/info?name='+cityName);\r\n\r\n                //console.log(oRes.data.body);\r\n                /* this.setState({\r\n                    sCurrentCityName:oRes.data.body.label\r\n                }) */\r\n\r\n                 // 将当前城市存储到数据中心\r\n                store.dispatch({\r\n                    type:'change_city',\r\n                    value:oRes.data.body\r\n                })\r\n                // 将返回的当前城市存储到sessionStorage中\r\n                sessionStorage.setItem('haoke_current_city', JSON.stringify( oRes.data.body ) )\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    fnShowCity=(sClass)=>{\r\n        this.setState({\r\n            sClass\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"search_bar\">\r\n                <div className=\"search_con\">\r\n                    <span className=\"city\" onClick={()=>{ this.fnShowCity('city_wrap slideUp') }  }>{this.state.sCurrentCityName}</span>\r\n                    <i className=\"iconfont icon-xialajiantouxiangxia\"></i>\r\n                    <span className=\"village\"><i className=\"iconfont icon-fangdajing\"></i> 请输入小区名</span>\r\n                </div>\r\n                <i className=\"iconfont icon-ic-maplocation-o tomap\" onClick={ ()=>this.props.history.push('/map') }></i>\r\n                <City sClass={this.state.sClass} fnShowCity={ this.fnShowCity } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// 定义轮播图组件\r\nclass Slide extends Component{\r\n    /*  \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data:[1,2,3]\r\n        }\r\n    } \r\n    */\r\n\r\n    // 上面的state属性的初始化可以简写成下面的形式\r\n    state = {\r\n        data:[]\r\n    }\r\n\r\n    componentDidMount(){\r\n       this.fnGetData()\r\n    }\r\n\r\n    fnGetData =async ()=>{\r\n        let oRes = await this.axios.get('/home/swiper');\r\n        //console.log(oRes.data.body);\r\n        this.setState({\r\n            data:oRes.data.body\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"slide_con\">\r\n                {\r\n                    this.state.data.length > 0 && <Carousel\r\n                    autoplay={true}\r\n                    infinite\r\n                    >\r\n                    {this.state.data.map(val => (\r\n                        <a\r\n                        key={val.id}\r\n                        href=\"http://www.itcast.cn\"\r\n                        style={{ display: 'inline-block', width: '100%', height: '10.6rem' }}\r\n                        >\r\n                        <img\r\n                            src={BASE_URL + val.imgSrc}\r\n                            alt=\"\"\r\n                            style={{ width: '100%', verticalAlign: 'top' }}\r\n                        />\r\n                        </a>\r\n                    ))}\r\n                </Carousel>\r\n                }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet Menu = props=>(\r\n    <ul className=\"menu_con\">\r\n        <li>\r\n            <Link to=\"#/\"><i className=\"iconfont icon-zufang1\"></i></Link>\r\n            <h4>整租</h4>\r\n        </li>\r\n        <li>\r\n            <Link to=\"#/\"><i className=\"iconfont icon-usergroup\"></i></Link>\r\n            <h4>合租</h4>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/map\"><i className=\"iconfont icon-ic-maplocation-o\"></i></Link>\r\n            <h4>地图找房</h4>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/rent\"><i className=\"iconfont icon-zufang\"></i></Link>\r\n            <h4>去出租</h4>\r\n        </li>\r\n    </ul>\r\n);\r\n\r\n\r\nclass Group extends Component{\r\n    state = {\r\n        aList:[]\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fnGetData()\r\n     }\r\n \r\n     fnGetData =async ()=>{\r\n         let oRes = await this.axios.get('/home/groups?area=AREA%7C88cff55c-aaa4-e2e0');\r\n         //console.log(oRes.data.body);\r\n         this.setState({\r\n             aList:oRes.data.body\r\n         })\r\n     }\r\n\r\n    render(){\r\n        let { aList } = this.state;\r\n        return (\r\n            <div className=\"model2\">\r\n                <div className=\"title_con\">\r\n                    <h3>租房小组</h3>\r\n                    <Link to=\"/\" className=\"iconfont icon-next\"></Link>\r\n                </div>\r\n                <ul className=\"house_list\">\r\n                    {\r\n                        aList.map(item=>(\r\n                             <li key={item.id}>\r\n                                <p className=\"fl\">{item.title}</p>\r\n                                <img src={BASE_URL + item.imgSrc} alt=\"\" className=\"fr\" />\r\n                                <span className=\"fl\">{item.desc}</span>\r\n                            </li>\r\n                        ))\r\n                    }\r\n                                      \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 用高级组件包裹Searchbar，让Searchbar拥有路由信息\r\nlet WithSearchbar = withRouter( Searchbar );\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <WithSearchbar />\r\n                <Slide />\r\n                <Menu />\r\n                <Group />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component,lazy} from 'react';\r\nimport './layout.css';\r\nimport Home from '../home/home';\r\nimport { Route,Link } from 'react-router-dom';\r\n\r\nlet Houselist =lazy(()=>import('../houselist/houselist'));\r\nlet Info =lazy(()=>import('../info/info'));\r\nlet User =lazy(()=>import('../user/user'));\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Route exact path=\"/layout\" component={ Home } />\r\n                <Route path=\"/layout/houselist\" component={ Houselist } />\r\n                <Route path=\"/layout/info\" component={ Info } />\r\n                <Route path=\"/layout/user\" component={ User } />\r\n                <footer>\r\n                    <ul>\r\n                        {/* <li className=\"active\">\r\n                            <Link to=\"/layout\" className=\"iconfont icon-home1\"></Link>\r\n                            <h4>首页</h4>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/layout/houselist\" className=\"iconfont icon-ziyuan\"></Link>\r\n                            <h4>找房</h4>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/layout/info\" className=\"iconfont icon-zixun\"></Link>\r\n                            <h4>资讯</h4>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/layout/user\" className=\"iconfont icon-wode\"></Link>\r\n                            <h4>我的</h4>\r\n                        </li> */}\r\n                        <CustomLink label=\"首页\" to=\"/layout\" exact={ true } sClass=\"icon-home1\" />\r\n                        <CustomLink label=\"找房\" to=\"/layout/houselist\" sClass=\"icon-ziyuan\" />\r\n                        <CustomLink label=\"资讯\" to=\"/layout/info\" sClass=\"icon-zixun\" />\r\n                        <CustomLink label=\"我的\" to=\"/layout/user\" sClass=\"icon-wode\" />\r\n                    </ul>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// 定义底部菜单的自定义路由\r\nfunction CustomLink({label,to,exact,sClass}){\r\n    return <Route \r\n            path = { to }\r\n            exact = { exact }\r\n            children={({match})=>(\r\n                <li className={match?'active':''}>\r\n                    <Link to={to} className={\"iconfont \"+sClass}></Link>\r\n                    <h4>{ label }</h4>\r\n                </li>\r\n            )}\r\n    />\r\n}\r\n\r\n\r\n\r\n\r\nexport default Layout;","import React, { Component,Suspense, lazy } from 'react';\r\nimport { HashRouter,Route,Switch,Redirect } from 'react-router-dom';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport Layout from './pages/layout/layout';\r\n\r\nlet Map = lazy(()=>import('./pages/map/map'));\r\nlet Detail = lazy(()=>import('./pages/detail/detail'));\r\nlet Login = lazy(()=>import('./pages/login/login'));\r\nlet Rent = lazy(()=>import('./pages/rent/rent'));\r\nlet Zlist = lazy(()=>import('./pages/rentlist/rentlist'));\r\n\r\n\r\nlet WithRent = withRouter( Rent );\r\nlet WithLogin = withRouter( Login );\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                <Switch>\r\n                    <Route path=\"/layout\" component={ Layout } />\r\n                    <Route path=\"/map\" component={ Map } />\r\n                    <Route path=\"/login\" component={ Login } />\r\n                    <Route path=\"/zlist\" component={ Zlist } />\r\n                    <Route path=\"/rent\" render={()=>{\r\n                        let token = localStorage.getItem('haoke_token');\r\n                        // 路由拦截返回的组件不包含路由属性\r\n                        // 所以要使用withRouter高阶组件包裹后返回的组件\r\n                        if(token){\r\n                            return <WithRent />\r\n                        }else{\r\n                            return <WithLogin />\r\n                        }\r\n\r\n                    }} />\r\n                    <Route path=\"/detail/:houseCode\" component={ Detail } />\r\n                    <Redirect exact from=\"/\" to=\"/layout\" />\r\n                </Switch>\r\n                </Suspense>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React,{ Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app.js'\n// 导入全局样式重置\nimport './assets/css/reset.css';\n\n// 导入rem设置的js\nimport './assets/js/set_root'\n\n// 全局导入字体图标的样式\nimport './assets/css/iconfont.css';\n\n// 全局引入antd-mobile样式\nimport 'antd-mobile/dist/antd-mobile.css';\n\n// 导入基地址\nimport { BASE_URL } from './utils';\n\nimport axios from 'axios';\n\n// 设置axios的基地址\naxios.defaults.baseURL = BASE_URL;\n\nlet aUrlList = ['/user','/user/logout','/user/houses'];\n\n// 设置axio的请求拦截器\naxios.interceptors.request.use(config=>{\n    //console.log( config.url );\n    let sUrl = config.url\n    let token = localStorage.getItem('haoke_token');\n    // 判断是否有token\n    if(token){\n        // 判断sUrl的值在不在上面的数组中\n        if( aUrlList.includes( sUrl ) ){\n\n            config.headers.authorization = token;\n        }\n    }\n    return config\n}, error=>{\n    return Promise.reject(error);\n});\n\n\n// 将axio对象关联到组件类的原型对象上\n// 这样，所有的组件上就会拥有axios对象的引用，可以直接使用\nComponent.prototype.axios = axios;\n\n\nReactDOM.render(<App />,document.getElementById('root'));","\r\nlet reducer = (state={label: \"深圳\", value: \"AREA|a6649a11-be98-b150\"},action)=>{\r\n    if(action.type==='change_city'){\r\n        return action.value;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\n\r\nimport reducer from './reducer.js';\r\n\r\nlet store = createStore(reducer);\r\n\r\nexport default store;","let BASE_URL = 'http://183.237.67.218:3001';\r\n\r\nexport { BASE_URL };","import React, { Component } from 'react';\r\nimport './city.css';\r\nimport store from '../store';\r\n\r\n// 导入可视区渲染的组件\r\nimport {List,AutoSizer} from 'react-virtualized';\r\n\r\n// 导入弹框组件\r\nimport { Toast } from 'antd-mobile';\r\n\r\n/* \r\n    当前返回的城市列表数据：\r\n    [\r\n        {label: \"北京\", value: \"AREA|88cff55c-aaa4-e2e0\", pinyin: \"beijing\", short: \"bj\"},\r\n        {label: \"安庆\", value: \"AREA|b4e8be1a-2de2-e039\", pinyin: \"anqing\", short: \"aq\"},\r\n        {label: \"南宁\", value: \"AREA|2bc437ca-b3d2-5c3c\", pinyin: \"nanning\", short: \"nn\"},\r\n        {label: \"长沙\", value: \"AREA|98b03413-6f84-c263\", pinyin: \"changsha\", short: \"cs\"},\r\n        {label: \"武汉\", value: \"AREA|27e414ce-a7e1-fd99\", pinyin: \"wuhan\", short: \"wh\"},\r\n        {label: \"重庆\", value: \"AREA|df130a14-79a9-a2ca\", pinyin: \"zhongqing\", short},\r\n        .......\r\n    ]\r\n\r\n    需要的数据格式：\r\n    {\r\n        A:[{label: \"安庆\", value: \"AREA|b4e8be1a-2de2-e039\", pinyin: \"anqing\", short: \"aq\"}],\r\n        B:[{label: \"宝鸡\", value: \"AREA|d67f3282-dfc6-a687\", pinyin: \"baoji\", short: \"b},{label: \"保定\", value: \"AREA|d67f3282-dfc6-a687\", pinyin: \"baoding\", short: \"bd\"}],\r\n        C:[ {label: \"长沙\", value: \"AREA|98b03413-6f84-c263\", pinyin: \"changsha\", short: \"cs\"},{label: \"重庆\", value: \"AREA|df130a14-79a9-a2ca\", pinyin: \"zhongqing\", short}]\r\n    }\r\n    ['#','hot','A','B','C','D'......]\r\n\r\n*/\r\n\r\n// 定义格式化数据的方法\r\nfunction fnFormatData(aList){\r\n    let oCityList = {};\r\n    aList.map(item=>{\r\n        // 获取城市名称的首字母，作为oCityList对象的key\r\n        let sLetter = item.short.substr(0,1);\r\n        // 通过 key in obj 来判断对象中是否包含某个键\r\n        if(sLetter in oCityList){\r\n            oCityList[sLetter].push(item);\r\n        }else{\r\n            oCityList[sLetter] = [item];\r\n        }\r\n    })\r\n\r\n    // Object.keys方法可以将对象里面的键拿出来生成一个数组\r\n    // sort() 方法将数组排序\r\n    let aCityKey = Object.keys( oCityList ).sort()\r\n\r\n    return {\r\n        oCityList,\r\n        aCityKey\r\n    }\r\n\r\n}\r\n\r\nfunction fnFormatName(str){\r\n    if(str==='#'){\r\n        return '当前城市'\r\n    }else if(str==='hot'){\r\n        return '热门城市'\r\n    }else{\r\n        return str.toUpperCase()\r\n    }\r\n}\r\n\r\nclass City extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            oCityList:{},\r\n            aCityKey:[],\r\n            oCurrentCity:store.getState(),\r\n            // 定义变量存储当前列表滚动到那个行的索引值\r\n            iCurrent:0\r\n        }\r\n\r\n        // 创建一个ref对象来关联List组件，方便我们在方法中调用List组件的方法\r\n        this.oRef = React.createRef();\r\n        this.unsubscribe = store.subscribe( this.fnStoreChange );\r\n\r\n        // 在组件上绑定一个布尔值来控制滚动设置右侧的索引值是否生效\r\n        this.bIsScrolling= true;\r\n    }\r\n\r\n    fnStoreChange=()=>{\r\n        this.setState({\r\n            oCurrentCity:store.getState()\r\n        },()=>{\r\n            // 在setState回调函数中去设置oCityList可以保证oCurrentCity是最新的当前城市\r\n            // 将oCityList里面#对应的当成城市也改成点击设置的当前城市\r\n            this.setState(state=>{\r\n                let oNowCityList = state.oCityList;\r\n                oNowCityList['#'] = [state.oCurrentCity];\r\n                return {\r\n                    oCityList:oNowCityList\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.unsubscribe()\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fnGetData();\r\n    }\r\n\r\n    fnGetData=async ()=>{\r\n        let sCityList = localStorage.getItem('haoke_city_list');\r\n        let oNowCityList = {};\r\n        if( sCityList ){\r\n            oNowCityList = JSON.parse( sCityList )\r\n        }else{\r\n            let oRes = await this.axios.get('/area/city?level=1');\r\n            localStorage.setItem('haoke_city_list',JSON.stringify( oRes.data.body )); \r\n            oNowCityList = oRes.data.body\r\n        }\r\n             \r\n        //console.log(oRes.data.body);\r\n        // 得到所有城市列表数据\r\n        let {oCityList, aCityKey}= fnFormatData( oNowCityList );\r\n        \r\n\r\n        // 加上热门城市数据\r\n        let sHotCityList = localStorage.getItem('haoke_hot_city_list');\r\n        let oNowHotCityList = {};\r\n        if( sHotCityList ){\r\n            oNowHotCityList = JSON.parse( sHotCityList )\r\n        }else{\r\n            let oRes2 = await this.axios.get('/area/hot');\r\n            localStorage.setItem('haoke_hot_city_list',JSON.stringify( oRes2.data.body )); \r\n            oNowHotCityList = oRes2.data.body\r\n        }     \r\n\r\n\r\n        oCityList['hot'] = oNowHotCityList;\r\n        aCityKey.unshift('hot');\r\n\r\n        // 加上当前城市\r\n        oCityList['#'] = [this.state.oCurrentCity];\r\n        aCityKey.unshift('#');\r\n\r\n        //console.log(oCityList,aCityKey);\r\n\r\n        this.setState({\r\n            oCityList,aCityKey\r\n        })\r\n\r\n    }\r\n\r\n\r\n  \r\n   // 定义List组件渲染结构的方法\r\n   // key是List组件自动生成的key，index是List组件传入的索引值，每次传一个值，值的范围是从0  到 aCityKey.length-1\r\n   // style是List组件生成的样式，这个样式属性必须加上\r\n   rowRenderer=({key,index,style})=>{\r\n        // 通过传入的index索引值从aCityKey数组中拿到对应的key\r\n        //console.log(index);\r\n        let sLetter = this.state.aCityKey[index];\r\n        //console.log(sLetter);\r\n\r\n        // 通过key在oCityList拿到城市的列表数据\r\n        let aCityList = this.state.oCityList[sLetter];\r\n\r\n        return (\r\n            <div className=\"city_group\" key={ key } style={ style }  >\r\n                <h4>{ fnFormatName(sLetter) }</h4>\r\n                <ul>\r\n                    {\r\n                        aCityList.map(val=><li key={ val.value } onClick={ ()=>this.fnChangeCity( val.label ) }>{val.label}</li>) \r\n                    }                                    \r\n                </ul>\r\n            </div>\r\n        )\r\n   }\r\n\r\n\r\n   // 定义改变当前城市的方法\r\n   fnChangeCity=async sName=>{\r\n       //alert(sName);\r\n       // 判断点击的城市是否是当前城市\r\n       if(sName===this.state.oCurrentCity.label){\r\n            Toast.info('当前城市已选！',2);\r\n            return;\r\n       }\r\n\r\n       let sNowCurrentCity = localStorage.getItem('haoke_test_city'+sName);\r\n       let oNowCurrentCity = {};\r\n       if( sNowCurrentCity ) {\r\n          oNowCurrentCity = JSON.parse( sNowCurrentCity )\r\n       }else{\r\n          // 将选择的城市名称传入一个借口，研究这个城市是否在公司业务范围内\r\n          let oRes = await this.axios.get('/area/info?name='+sName);\r\n          localStorage.setItem('haoke_test_city'+sName, JSON.stringify( oRes.data.body ));\r\n          oNowCurrentCity = oRes.data.body;\r\n       }       \r\n       \r\n       // console.log(oRes.data.body);\r\n\r\n       // 如果传入的城市名称不是上海，但是返回的城市数据是上海的数据\r\n       // 说明当前城市不再公司业务范围内，那么就提示用户没有这个城市的数据，然后不做操作\r\n       if( sName!=='上海' && oNowCurrentCity.label==='上海' ){\r\n          Toast.info('当前城市没有数据，请换一个城市！',2);\r\n       }else{\r\n\r\n        // 如果点击的城市名称在公司范围内，就将点击的城市数据存储到数据中心，同时存储到sessionStorage\r\n        store.dispatch({\r\n            type:'change_city',\r\n            value:oNowCurrentCity\r\n        });        \r\n\r\n        sessionStorage.setItem('haoke_current_city', JSON.stringify( oNowCurrentCity ) )\r\n\r\n        // 同时关闭城市列表\r\n        this.props.fnShowCity('city_wrap');\r\n    }\r\n\r\n\r\n   }\r\n\r\n\r\n   // 定义计算每一行高度的方法\r\n   rowHeightCount=({index})=>{\r\n      // 通过传入的index索引值从aCityKey数组中拿到对应的key\r\n      let sLetter = this.state.aCityKey[index];\r\n      // 通过key在oCityList拿到城市的列表数据的成员个数\r\n      let iLen = this.state.oCityList[sLetter].length;\r\n      return 40 + 58*iLen\r\n   }\r\n\r\n   // 定义点击字母滚动到对应行的方法\r\n   fnScrollToRow=(i)=>{\r\n        this.bIsScrolling = false;\r\n       // 让List组件滚动到索引值i对应的行那里\r\n        this.oRef.current.scrollToRow( i );\r\n        // 将右侧第i个字母设置成高亮\r\n        this.setState({\r\n            iCurrent:i\r\n        })\r\n        setTimeout(()=>{\r\n            this.bIsScrolling = true;\r\n        },200);\r\n   }\r\n   // 定义列表滚动时关联触发的方法\r\n   onRowsRendered=({startIndex})=>{\r\n        //console.log(startIndex);\r\n        if( this.bIsScrolling ){\r\n            this.setState({\r\n                iCurrent:startIndex\r\n            }) \r\n        }       \r\n   }\r\n\r\n   onScroll=({scrollHeight,scrollTop,clientHeight})=>{\r\n       //console.log(scrollHeight + ' | ' + (scrollTop +  clientHeight));       \r\n       // scrollHeight表示整个列表的高度，scrollTop表示已经滚动过去的高度，clientHeight表示滚动可视区的高度\r\n       // 当滚动到最底部的时候\r\n       if( (scrollHeight - (scrollTop +  clientHeight))< 1  ){\r\n           this.setState({\r\n                iCurrent:this.state.aCityKey.length-1\r\n           })\r\n       }\r\n   }\r\n\r\n    render() {\r\n        let { iCurrent,aCityKey } = this.state;\r\n        return (\r\n            <div className={ this.props.sClass }>\r\n                <div className=\"city_title\">\r\n                    <span className=\"shutoff iconfont icon-shut\" onClick={()=>{ this.props.fnShowCity('city_wrap') }}></span>\r\n                    <h3>选择城市</h3>\r\n                </div>        \r\n                <div className=\"group_con\">\r\n                <AutoSizer>\r\n                    {({height, width}) => (\r\n                    <List\r\n                        ref={ this.oRef }\r\n                        width={width}\r\n                        height={height}\r\n                        rowCount={aCityKey.length}\r\n                        rowHeight={this.rowHeightCount}\r\n                        rowRenderer={this.rowRenderer}\r\n                        // 设置滚动的行按照定格对齐\r\n                        scrollToAlignment='start'\r\n                        // 定义列表滚动时关联的方法\r\n                        onRowsRendered={ this.onRowsRendered }\r\n                        // 定义列表滚动时关联的方法\r\n                        onScroll = { this.onScroll }\r\n                    />                    \r\n                    )}\r\n                </AutoSizer>\r\n\r\n                </div>\r\n                <ul className=\"city_index\">\r\n                    {\r\n                        aCityKey.map((item,i)=><li className={ (iCurrent===i)?'active':'' } key={ item } onClick={()=>this.fnScrollToRow(i)}><span>{ item==='hot'?'热':item.toUpperCase() }</span></li>)\r\n                    }                    \r\n                  \r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default City;"],"sourceRoot":""}